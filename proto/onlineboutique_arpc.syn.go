// Code generated by protoc-gen-arpc. DO NOT EDIT.
package onlineboutique

import (
	"context"
	"github.com/appnet-org/arpc/pkg/rpc"
	"github.com/appnet-org/arpc/pkg/rpc/element"
)

// CartServiceClient is the client API for CartService service.
type CartServiceClient interface {
	AddItem(ctx context.Context, req *AddItemRequest) (*Empty, error)
	GetCart(ctx context.Context, req *GetCartRequest) (*Cart, error)
	EmptyCart(ctx context.Context, req *EmptyCartRequest) (*Empty, error)
}

type arpcCartServiceClient struct {
	client *rpc.Client
}

func NewCartServiceClient(client *rpc.Client) CartServiceClient {
	return &arpcCartServiceClient{client: client}
}

func (c *arpcCartServiceClient) AddItem(ctx context.Context, req *AddItemRequest) (*Empty, error) {
	resp := new(Empty)
	if err := c.client.Call(ctx, "CartService", "AddItem", req, resp); err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *arpcCartServiceClient) GetCart(ctx context.Context, req *GetCartRequest) (*Cart, error) {
	resp := new(Cart)
	if err := c.client.Call(ctx, "CartService", "GetCart", req, resp); err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *arpcCartServiceClient) EmptyCart(ctx context.Context, req *EmptyCartRequest) (*Empty, error) {
	resp := new(Empty)
	if err := c.client.Call(ctx, "CartService", "EmptyCart", req, resp); err != nil {
		return nil, err
	}
	return resp, nil
}

type CartServiceServer interface {
	AddItem(ctx context.Context, req *AddItemRequest) (*Empty, context.Context, error)
	GetCart(ctx context.Context, req *GetCartRequest) (*Cart, context.Context, error)
	EmptyCart(ctx context.Context, req *EmptyCartRequest) (*Empty, context.Context, error)
}

func RegisterCartServiceServer(s *rpc.Server, srv CartServiceServer) {
	s.RegisterService(&rpc.ServiceDesc{
		ServiceName: "CartService",
		ServiceImpl: srv,
		Methods: map[string]*rpc.MethodDesc{
			"AddItem": {
				MethodName: "AddItem",
				Handler:    _CartService_AddItem_Handler,
			},
			"GetCart": {
				MethodName: "GetCart",
				Handler:    _CartService_GetCart_Handler,
			},
			"EmptyCart": {
				MethodName: "EmptyCart",
				Handler:    _CartService_EmptyCart_Handler,
			},
		},
	}, srv)
}

func _CartService_AddItem_Handler(srv any, ctx context.Context, dec func(any) error, req *element.RPCRequest, chain *element.RPCElementChain) (*element.RPCResponse, context.Context, error) {
	req.Payload = new(AddItemRequest)
	if err := dec(req.Payload); err != nil {
		return nil, ctx, err
	}
	req, ctx, err := chain.ProcessRequest(ctx, req)
	if err != nil {
		return nil, ctx, err
	}
	result, ctx, err := srv.(CartServiceServer).AddItem(ctx, req.Payload.(*AddItemRequest))
	if err != nil {
		return nil, ctx, err
	}
	resp := &element.RPCResponse{
		ID:     req.ID,
		Result: result,
	}
	resp, ctx, err = chain.ProcessResponse(ctx, resp)
	if err != nil {
		return nil, ctx, err
	}
	return resp, ctx, err
}

func _CartService_GetCart_Handler(srv any, ctx context.Context, dec func(any) error, req *element.RPCRequest, chain *element.RPCElementChain) (*element.RPCResponse, context.Context, error) {
	req.Payload = new(GetCartRequest)
	if err := dec(req.Payload); err != nil {
		return nil, ctx, err
	}
	req, ctx, err := chain.ProcessRequest(ctx, req)
	if err != nil {
		return nil, ctx, err
	}
	result, ctx, err := srv.(CartServiceServer).GetCart(ctx, req.Payload.(*GetCartRequest))
	if err != nil {
		return nil, ctx, err
	}
	resp := &element.RPCResponse{
		ID:     req.ID,
		Result: result,
	}
	resp, ctx, err = chain.ProcessResponse(ctx, resp)
	if err != nil {
		return nil, ctx, err
	}
	return resp, ctx, err
}

func _CartService_EmptyCart_Handler(srv any, ctx context.Context, dec func(any) error, req *element.RPCRequest, chain *element.RPCElementChain) (*element.RPCResponse, context.Context, error) {
	req.Payload = new(EmptyCartRequest)
	if err := dec(req.Payload); err != nil {
		return nil, ctx, err
	}
	req, ctx, err := chain.ProcessRequest(ctx, req)
	if err != nil {
		return nil, ctx, err
	}
	result, ctx, err := srv.(CartServiceServer).EmptyCart(ctx, req.Payload.(*EmptyCartRequest))
	if err != nil {
		return nil, ctx, err
	}
	resp := &element.RPCResponse{
		ID:     req.ID,
		Result: result,
	}
	resp, ctx, err = chain.ProcessResponse(ctx, resp)
	if err != nil {
		return nil, ctx, err
	}
	return resp, ctx, err
}

// RecommendationServiceClient is the client API for RecommendationService service.
type RecommendationServiceClient interface {
	ListRecommendations(ctx context.Context, req *ListRecommendationsRequest) (*ListRecommendationsResponse, error)
}

type arpcRecommendationServiceClient struct {
	client *rpc.Client
}

func NewRecommendationServiceClient(client *rpc.Client) RecommendationServiceClient {
	return &arpcRecommendationServiceClient{client: client}
}

func (c *arpcRecommendationServiceClient) ListRecommendations(ctx context.Context, req *ListRecommendationsRequest) (*ListRecommendationsResponse, error) {
	resp := new(ListRecommendationsResponse)
	if err := c.client.Call(ctx, "RecommendationService", "ListRecommendations", req, resp); err != nil {
		return nil, err
	}
	return resp, nil
}

type RecommendationServiceServer interface {
	ListRecommendations(ctx context.Context, req *ListRecommendationsRequest) (*ListRecommendationsResponse, context.Context, error)
}

func RegisterRecommendationServiceServer(s *rpc.Server, srv RecommendationServiceServer) {
	s.RegisterService(&rpc.ServiceDesc{
		ServiceName: "RecommendationService",
		ServiceImpl: srv,
		Methods: map[string]*rpc.MethodDesc{
			"ListRecommendations": {
				MethodName: "ListRecommendations",
				Handler:    _RecommendationService_ListRecommendations_Handler,
			},
		},
	}, srv)
}

func _RecommendationService_ListRecommendations_Handler(srv any, ctx context.Context, dec func(any) error, req *element.RPCRequest, chain *element.RPCElementChain) (*element.RPCResponse, context.Context, error) {
	req.Payload = new(ListRecommendationsRequest)
	if err := dec(req.Payload); err != nil {
		return nil, ctx, err
	}
	req, ctx, err := chain.ProcessRequest(ctx, req)
	if err != nil {
		return nil, ctx, err
	}
	result, ctx, err := srv.(RecommendationServiceServer).ListRecommendations(ctx, req.Payload.(*ListRecommendationsRequest))
	if err != nil {
		return nil, ctx, err
	}
	resp := &element.RPCResponse{
		ID:     req.ID,
		Result: result,
	}
	resp, ctx, err = chain.ProcessResponse(ctx, resp)
	if err != nil {
		return nil, ctx, err
	}
	return resp, ctx, err
}

// ProductCatalogServiceClient is the client API for ProductCatalogService service.
type ProductCatalogServiceClient interface {
	ListProducts(ctx context.Context, req *EmptyUser) (*ListProductsResponse, error)
	GetProduct(ctx context.Context, req *GetProductRequest) (*Product, error)
	SearchProducts(ctx context.Context, req *SearchProductsRequest) (*SearchProductsResponse, error)
}

type arpcProductCatalogServiceClient struct {
	client *rpc.Client
}

func NewProductCatalogServiceClient(client *rpc.Client) ProductCatalogServiceClient {
	return &arpcProductCatalogServiceClient{client: client}
}

func (c *arpcProductCatalogServiceClient) ListProducts(ctx context.Context, req *EmptyUser) (*ListProductsResponse, error) {
	resp := new(ListProductsResponse)
	if err := c.client.Call(ctx, "ProductCatalogService", "ListProducts", req, resp); err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *arpcProductCatalogServiceClient) GetProduct(ctx context.Context, req *GetProductRequest) (*Product, error) {
	resp := new(Product)
	if err := c.client.Call(ctx, "ProductCatalogService", "GetProduct", req, resp); err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *arpcProductCatalogServiceClient) SearchProducts(ctx context.Context, req *SearchProductsRequest) (*SearchProductsResponse, error) {
	resp := new(SearchProductsResponse)
	if err := c.client.Call(ctx, "ProductCatalogService", "SearchProducts", req, resp); err != nil {
		return nil, err
	}
	return resp, nil
}

type ProductCatalogServiceServer interface {
	ListProducts(ctx context.Context, req *EmptyUser) (*ListProductsResponse, context.Context, error)
	GetProduct(ctx context.Context, req *GetProductRequest) (*Product, context.Context, error)
	SearchProducts(ctx context.Context, req *SearchProductsRequest) (*SearchProductsResponse, context.Context, error)
}

func RegisterProductCatalogServiceServer(s *rpc.Server, srv ProductCatalogServiceServer) {
	s.RegisterService(&rpc.ServiceDesc{
		ServiceName: "ProductCatalogService",
		ServiceImpl: srv,
		Methods: map[string]*rpc.MethodDesc{
			"ListProducts": {
				MethodName: "ListProducts",
				Handler:    _ProductCatalogService_ListProducts_Handler,
			},
			"GetProduct": {
				MethodName: "GetProduct",
				Handler:    _ProductCatalogService_GetProduct_Handler,
			},
			"SearchProducts": {
				MethodName: "SearchProducts",
				Handler:    _ProductCatalogService_SearchProducts_Handler,
			},
		},
	}, srv)
}

func _ProductCatalogService_ListProducts_Handler(srv any, ctx context.Context, dec func(any) error, req *element.RPCRequest, chain *element.RPCElementChain) (*element.RPCResponse, context.Context, error) {
	req.Payload = new(EmptyUser)
	if err := dec(req.Payload); err != nil {
		return nil, ctx, err
	}
	req, ctx, err := chain.ProcessRequest(ctx, req)
	if err != nil {
		return nil, ctx, err
	}
	result, ctx, err := srv.(ProductCatalogServiceServer).ListProducts(ctx, req.Payload.(*EmptyUser))
	if err != nil {
		return nil, ctx, err
	}
	resp := &element.RPCResponse{
		ID:     req.ID,
		Result: result,
	}
	resp, ctx, err = chain.ProcessResponse(ctx, resp)
	if err != nil {
		return nil, ctx, err
	}
	return resp, ctx, err
}

func _ProductCatalogService_GetProduct_Handler(srv any, ctx context.Context, dec func(any) error, req *element.RPCRequest, chain *element.RPCElementChain) (*element.RPCResponse, context.Context, error) {
	req.Payload = new(GetProductRequest)
	if err := dec(req.Payload); err != nil {
		return nil, ctx, err
	}
	req, ctx, err := chain.ProcessRequest(ctx, req)
	if err != nil {
		return nil, ctx, err
	}
	result, ctx, err := srv.(ProductCatalogServiceServer).GetProduct(ctx, req.Payload.(*GetProductRequest))
	if err != nil {
		return nil, ctx, err
	}
	resp := &element.RPCResponse{
		ID:     req.ID,
		Result: result,
	}
	resp, ctx, err = chain.ProcessResponse(ctx, resp)
	if err != nil {
		return nil, ctx, err
	}
	return resp, ctx, err
}

func _ProductCatalogService_SearchProducts_Handler(srv any, ctx context.Context, dec func(any) error, req *element.RPCRequest, chain *element.RPCElementChain) (*element.RPCResponse, context.Context, error) {
	req.Payload = new(SearchProductsRequest)
	if err := dec(req.Payload); err != nil {
		return nil, ctx, err
	}
	req, ctx, err := chain.ProcessRequest(ctx, req)
	if err != nil {
		return nil, ctx, err
	}
	result, ctx, err := srv.(ProductCatalogServiceServer).SearchProducts(ctx, req.Payload.(*SearchProductsRequest))
	if err != nil {
		return nil, ctx, err
	}
	resp := &element.RPCResponse{
		ID:     req.ID,
		Result: result,
	}
	resp, ctx, err = chain.ProcessResponse(ctx, resp)
	if err != nil {
		return nil, ctx, err
	}
	return resp, ctx, err
}

// ShippingServiceClient is the client API for ShippingService service.
type ShippingServiceClient interface {
	GetQuote(ctx context.Context, req *GetQuoteRequest) (*GetQuoteResponse, error)
	ShipOrder(ctx context.Context, req *ShipOrderRequest) (*ShipOrderResponse, error)
}

type arpcShippingServiceClient struct {
	client *rpc.Client
}

func NewShippingServiceClient(client *rpc.Client) ShippingServiceClient {
	return &arpcShippingServiceClient{client: client}
}

func (c *arpcShippingServiceClient) GetQuote(ctx context.Context, req *GetQuoteRequest) (*GetQuoteResponse, error) {
	resp := new(GetQuoteResponse)
	if err := c.client.Call(ctx, "ShippingService", "GetQuote", req, resp); err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *arpcShippingServiceClient) ShipOrder(ctx context.Context, req *ShipOrderRequest) (*ShipOrderResponse, error) {
	resp := new(ShipOrderResponse)
	if err := c.client.Call(ctx, "ShippingService", "ShipOrder", req, resp); err != nil {
		return nil, err
	}
	return resp, nil
}

type ShippingServiceServer interface {
	GetQuote(ctx context.Context, req *GetQuoteRequest) (*GetQuoteResponse, context.Context, error)
	ShipOrder(ctx context.Context, req *ShipOrderRequest) (*ShipOrderResponse, context.Context, error)
}

func RegisterShippingServiceServer(s *rpc.Server, srv ShippingServiceServer) {
	s.RegisterService(&rpc.ServiceDesc{
		ServiceName: "ShippingService",
		ServiceImpl: srv,
		Methods: map[string]*rpc.MethodDesc{
			"GetQuote": {
				MethodName: "GetQuote",
				Handler:    _ShippingService_GetQuote_Handler,
			},
			"ShipOrder": {
				MethodName: "ShipOrder",
				Handler:    _ShippingService_ShipOrder_Handler,
			},
		},
	}, srv)
}

func _ShippingService_GetQuote_Handler(srv any, ctx context.Context, dec func(any) error, req *element.RPCRequest, chain *element.RPCElementChain) (*element.RPCResponse, context.Context, error) {
	req.Payload = new(GetQuoteRequest)
	if err := dec(req.Payload); err != nil {
		return nil, ctx, err
	}
	req, ctx, err := chain.ProcessRequest(ctx, req)
	if err != nil {
		return nil, ctx, err
	}
	result, ctx, err := srv.(ShippingServiceServer).GetQuote(ctx, req.Payload.(*GetQuoteRequest))
	if err != nil {
		return nil, ctx, err
	}
	resp := &element.RPCResponse{
		ID:     req.ID,
		Result: result,
	}
	resp, ctx, err = chain.ProcessResponse(ctx, resp)
	if err != nil {
		return nil, ctx, err
	}
	return resp, ctx, err
}

func _ShippingService_ShipOrder_Handler(srv any, ctx context.Context, dec func(any) error, req *element.RPCRequest, chain *element.RPCElementChain) (*element.RPCResponse, context.Context, error) {
	req.Payload = new(ShipOrderRequest)
	if err := dec(req.Payload); err != nil {
		return nil, ctx, err
	}
	req, ctx, err := chain.ProcessRequest(ctx, req)
	if err != nil {
		return nil, ctx, err
	}
	result, ctx, err := srv.(ShippingServiceServer).ShipOrder(ctx, req.Payload.(*ShipOrderRequest))
	if err != nil {
		return nil, ctx, err
	}
	resp := &element.RPCResponse{
		ID:     req.ID,
		Result: result,
	}
	resp, ctx, err = chain.ProcessResponse(ctx, resp)
	if err != nil {
		return nil, ctx, err
	}
	return resp, ctx, err
}

// CurrencyServiceClient is the client API for CurrencyService service.
type CurrencyServiceClient interface {
	GetSupportedCurrencies(ctx context.Context, req *EmptyUser) (*GetSupportedCurrenciesResponse, error)
	Convert(ctx context.Context, req *CurrencyConversionRequest) (*Money, error)
}

type arpcCurrencyServiceClient struct {
	client *rpc.Client
}

func NewCurrencyServiceClient(client *rpc.Client) CurrencyServiceClient {
	return &arpcCurrencyServiceClient{client: client}
}

func (c *arpcCurrencyServiceClient) GetSupportedCurrencies(ctx context.Context, req *EmptyUser) (*GetSupportedCurrenciesResponse, error) {
	resp := new(GetSupportedCurrenciesResponse)
	if err := c.client.Call(ctx, "CurrencyService", "GetSupportedCurrencies", req, resp); err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *arpcCurrencyServiceClient) Convert(ctx context.Context, req *CurrencyConversionRequest) (*Money, error) {
	resp := new(Money)
	if err := c.client.Call(ctx, "CurrencyService", "Convert", req, resp); err != nil {
		return nil, err
	}
	return resp, nil
}

type CurrencyServiceServer interface {
	GetSupportedCurrencies(ctx context.Context, req *EmptyUser) (*GetSupportedCurrenciesResponse, context.Context, error)
	Convert(ctx context.Context, req *CurrencyConversionRequest) (*Money, context.Context, error)
}

func RegisterCurrencyServiceServer(s *rpc.Server, srv CurrencyServiceServer) {
	s.RegisterService(&rpc.ServiceDesc{
		ServiceName: "CurrencyService",
		ServiceImpl: srv,
		Methods: map[string]*rpc.MethodDesc{
			"GetSupportedCurrencies": {
				MethodName: "GetSupportedCurrencies",
				Handler:    _CurrencyService_GetSupportedCurrencies_Handler,
			},
			"Convert": {
				MethodName: "Convert",
				Handler:    _CurrencyService_Convert_Handler,
			},
		},
	}, srv)
}

func _CurrencyService_GetSupportedCurrencies_Handler(srv any, ctx context.Context, dec func(any) error, req *element.RPCRequest, chain *element.RPCElementChain) (*element.RPCResponse, context.Context, error) {
	req.Payload = new(EmptyUser)
	if err := dec(req.Payload); err != nil {
		return nil, ctx, err
	}
	req, ctx, err := chain.ProcessRequest(ctx, req)
	if err != nil {
		return nil, ctx, err
	}
	result, ctx, err := srv.(CurrencyServiceServer).GetSupportedCurrencies(ctx, req.Payload.(*EmptyUser))
	if err != nil {
		return nil, ctx, err
	}
	resp := &element.RPCResponse{
		ID:     req.ID,
		Result: result,
	}
	resp, ctx, err = chain.ProcessResponse(ctx, resp)
	if err != nil {
		return nil, ctx, err
	}
	return resp, ctx, err
}

func _CurrencyService_Convert_Handler(srv any, ctx context.Context, dec func(any) error, req *element.RPCRequest, chain *element.RPCElementChain) (*element.RPCResponse, context.Context, error) {
	req.Payload = new(CurrencyConversionRequest)
	if err := dec(req.Payload); err != nil {
		return nil, ctx, err
	}
	req, ctx, err := chain.ProcessRequest(ctx, req)
	if err != nil {
		return nil, ctx, err
	}
	result, ctx, err := srv.(CurrencyServiceServer).Convert(ctx, req.Payload.(*CurrencyConversionRequest))
	if err != nil {
		return nil, ctx, err
	}
	resp := &element.RPCResponse{
		ID:     req.ID,
		Result: result,
	}
	resp, ctx, err = chain.ProcessResponse(ctx, resp)
	if err != nil {
		return nil, ctx, err
	}
	return resp, ctx, err
}

// PaymentServiceClient is the client API for PaymentService service.
type PaymentServiceClient interface {
	Charge(ctx context.Context, req *ChargeRequest) (*ChargeResponse, error)
}

type arpcPaymentServiceClient struct {
	client *rpc.Client
}

func NewPaymentServiceClient(client *rpc.Client) PaymentServiceClient {
	return &arpcPaymentServiceClient{client: client}
}

func (c *arpcPaymentServiceClient) Charge(ctx context.Context, req *ChargeRequest) (*ChargeResponse, error) {
	resp := new(ChargeResponse)
	if err := c.client.Call(ctx, "PaymentService", "Charge", req, resp); err != nil {
		return nil, err
	}
	return resp, nil
}

type PaymentServiceServer interface {
	Charge(ctx context.Context, req *ChargeRequest) (*ChargeResponse, context.Context, error)
}

func RegisterPaymentServiceServer(s *rpc.Server, srv PaymentServiceServer) {
	s.RegisterService(&rpc.ServiceDesc{
		ServiceName: "PaymentService",
		ServiceImpl: srv,
		Methods: map[string]*rpc.MethodDesc{
			"Charge": {
				MethodName: "Charge",
				Handler:    _PaymentService_Charge_Handler,
			},
		},
	}, srv)
}

func _PaymentService_Charge_Handler(srv any, ctx context.Context, dec func(any) error, req *element.RPCRequest, chain *element.RPCElementChain) (*element.RPCResponse, context.Context, error) {
	req.Payload = new(ChargeRequest)
	if err := dec(req.Payload); err != nil {
		return nil, ctx, err
	}
	req, ctx, err := chain.ProcessRequest(ctx, req)
	if err != nil {
		return nil, ctx, err
	}
	result, ctx, err := srv.(PaymentServiceServer).Charge(ctx, req.Payload.(*ChargeRequest))
	if err != nil {
		return nil, ctx, err
	}
	resp := &element.RPCResponse{
		ID:     req.ID,
		Result: result,
	}
	resp, ctx, err = chain.ProcessResponse(ctx, resp)
	if err != nil {
		return nil, ctx, err
	}
	return resp, ctx, err
}

// EmailServiceClient is the client API for EmailService service.
type EmailServiceClient interface {
	SendOrderConfirmation(ctx context.Context, req *SendOrderConfirmationRequest) (*Empty, error)
}

type arpcEmailServiceClient struct {
	client *rpc.Client
}

func NewEmailServiceClient(client *rpc.Client) EmailServiceClient {
	return &arpcEmailServiceClient{client: client}
}

func (c *arpcEmailServiceClient) SendOrderConfirmation(ctx context.Context, req *SendOrderConfirmationRequest) (*Empty, error) {
	resp := new(Empty)
	if err := c.client.Call(ctx, "EmailService", "SendOrderConfirmation", req, resp); err != nil {
		return nil, err
	}
	return resp, nil
}

type EmailServiceServer interface {
	SendOrderConfirmation(ctx context.Context, req *SendOrderConfirmationRequest) (*Empty, context.Context, error)
}

func RegisterEmailServiceServer(s *rpc.Server, srv EmailServiceServer) {
	s.RegisterService(&rpc.ServiceDesc{
		ServiceName: "EmailService",
		ServiceImpl: srv,
		Methods: map[string]*rpc.MethodDesc{
			"SendOrderConfirmation": {
				MethodName: "SendOrderConfirmation",
				Handler:    _EmailService_SendOrderConfirmation_Handler,
			},
		},
	}, srv)
}

func _EmailService_SendOrderConfirmation_Handler(srv any, ctx context.Context, dec func(any) error, req *element.RPCRequest, chain *element.RPCElementChain) (*element.RPCResponse, context.Context, error) {
	req.Payload = new(SendOrderConfirmationRequest)
	if err := dec(req.Payload); err != nil {
		return nil, ctx, err
	}
	req, ctx, err := chain.ProcessRequest(ctx, req)
	if err != nil {
		return nil, ctx, err
	}
	result, ctx, err := srv.(EmailServiceServer).SendOrderConfirmation(ctx, req.Payload.(*SendOrderConfirmationRequest))
	if err != nil {
		return nil, ctx, err
	}
	resp := &element.RPCResponse{
		ID:     req.ID,
		Result: result,
	}
	resp, ctx, err = chain.ProcessResponse(ctx, resp)
	if err != nil {
		return nil, ctx, err
	}
	return resp, ctx, err
}

// CheckoutServiceClient is the client API for CheckoutService service.
type CheckoutServiceClient interface {
	PlaceOrder(ctx context.Context, req *PlaceOrderRequest) (*PlaceOrderResponse, error)
}

type arpcCheckoutServiceClient struct {
	client *rpc.Client
}

func NewCheckoutServiceClient(client *rpc.Client) CheckoutServiceClient {
	return &arpcCheckoutServiceClient{client: client}
}

func (c *arpcCheckoutServiceClient) PlaceOrder(ctx context.Context, req *PlaceOrderRequest) (*PlaceOrderResponse, error) {
	resp := new(PlaceOrderResponse)
	if err := c.client.Call(ctx, "CheckoutService", "PlaceOrder", req, resp); err != nil {
		return nil, err
	}
	return resp, nil
}

type CheckoutServiceServer interface {
	PlaceOrder(ctx context.Context, req *PlaceOrderRequest) (*PlaceOrderResponse, context.Context, error)
}

func RegisterCheckoutServiceServer(s *rpc.Server, srv CheckoutServiceServer) {
	s.RegisterService(&rpc.ServiceDesc{
		ServiceName: "CheckoutService",
		ServiceImpl: srv,
		Methods: map[string]*rpc.MethodDesc{
			"PlaceOrder": {
				MethodName: "PlaceOrder",
				Handler:    _CheckoutService_PlaceOrder_Handler,
			},
		},
	}, srv)
}

func _CheckoutService_PlaceOrder_Handler(srv any, ctx context.Context, dec func(any) error, req *element.RPCRequest, chain *element.RPCElementChain) (*element.RPCResponse, context.Context, error) {
	req.Payload = new(PlaceOrderRequest)
	if err := dec(req.Payload); err != nil {
		return nil, ctx, err
	}
	req, ctx, err := chain.ProcessRequest(ctx, req)
	if err != nil {
		return nil, ctx, err
	}
	result, ctx, err := srv.(CheckoutServiceServer).PlaceOrder(ctx, req.Payload.(*PlaceOrderRequest))
	if err != nil {
		return nil, ctx, err
	}
	resp := &element.RPCResponse{
		ID:     req.ID,
		Result: result,
	}
	resp, ctx, err = chain.ProcessResponse(ctx, resp)
	if err != nil {
		return nil, ctx, err
	}
	return resp, ctx, err
}

// AdServiceClient is the client API for AdService service.
type AdServiceClient interface {
	GetAds(ctx context.Context, req *AdRequest) (*AdResponse, error)
}

type arpcAdServiceClient struct {
	client *rpc.Client
}

func NewAdServiceClient(client *rpc.Client) AdServiceClient {
	return &arpcAdServiceClient{client: client}
}

func (c *arpcAdServiceClient) GetAds(ctx context.Context, req *AdRequest) (*AdResponse, error) {
	resp := new(AdResponse)
	if err := c.client.Call(ctx, "AdService", "GetAds", req, resp); err != nil {
		return nil, err
	}
	return resp, nil
}

type AdServiceServer interface {
	GetAds(ctx context.Context, req *AdRequest) (*AdResponse, context.Context, error)
}

func RegisterAdServiceServer(s *rpc.Server, srv AdServiceServer) {
	s.RegisterService(&rpc.ServiceDesc{
		ServiceName: "AdService",
		ServiceImpl: srv,
		Methods: map[string]*rpc.MethodDesc{
			"GetAds": {
				MethodName: "GetAds",
				Handler:    _AdService_GetAds_Handler,
			},
		},
	}, srv)
}

func _AdService_GetAds_Handler(srv any, ctx context.Context, dec func(any) error, req *element.RPCRequest, chain *element.RPCElementChain) (*element.RPCResponse, context.Context, error) {
	req.Payload = new(AdRequest)
	if err := dec(req.Payload); err != nil {
		return nil, ctx, err
	}
	req, ctx, err := chain.ProcessRequest(ctx, req)
	if err != nil {
		return nil, ctx, err
	}
	result, ctx, err := srv.(AdServiceServer).GetAds(ctx, req.Payload.(*AdRequest))
	if err != nil {
		return nil, ctx, err
	}
	resp := &element.RPCResponse{
		ID:     req.ID,
		Result: result,
	}
	resp, ctx, err = chain.ProcessResponse(ctx, resp)
	if err != nil {
		return nil, ctx, err
	}
	return resp, ctx, err
}
